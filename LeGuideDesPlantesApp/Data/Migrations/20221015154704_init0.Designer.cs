// <auto-generated />
using System;
using LeGuideDesPlantesApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LeGuideDesPlantesApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221015154704_init0")]
    partial class init0
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationRoleApplicationUser", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationRoleApplicationUser");
                });

            modelBuilder.Entity("ArbresPays", b =>
                {
                    b.Property<int>("ArbresId")
                        .HasColumnType("int");

                    b.Property<int>("PaysId")
                        .HasColumnType("int");

                    b.HasKey("ArbresId", "PaysId");

                    b.HasIndex("PaysId");

                    b.ToTable("ArbresPays");
                });

            modelBuilder.Entity("HuilesEssentielPays", b =>
                {
                    b.Property<int>("HuilesEssentielsId")
                        .HasColumnType("int");

                    b.Property<int>("PaysId")
                        .HasColumnType("int");

                    b.HasKey("HuilesEssentielsId", "PaysId");

                    b.HasIndex("PaysId");

                    b.ToTable("HuilesEssentielPays");
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Models.Arbres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Arosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BienFait")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategorieId")
                        .HasColumnType("int");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Danger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entretiens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Habitat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HuilesEssentielId")
                        .HasColumnType("int");

                    b.Property<string>("Maladies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodeDeFleuraison")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefenrenceTerrain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rusticite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taille")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voisinage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.HasIndex("HuilesEssentielId");

                    b.ToTable("Arbres");
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Models.Categorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ArbresId")
                        .HasColumnType("int");

                    b.Property<int?>("HuilesEssentielId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantesAromatiquesId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantesSauvagesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Models.HuilesEssentiel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionSurLeCorps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategorieId")
                        .HasColumnType("int");

                    b.Property<string>("Circulation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComposantPrincipal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conservation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Digestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Famille")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrossesEtEnfants")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodeExtraction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MusclesEtArticulations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomLatin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeauEtCheveux")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlantesAromatiquesId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantesSauvagesId")
                        .HasColumnType("int");

                    b.Property<string>("Precaution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemesFeminins")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProprietePrincipal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SensualitePourCouples")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.HasIndex("PlantesAromatiquesId")
                        .IsUnique()
                        .HasFilter("[PlantesAromatiquesId] IS NOT NULL");

                    b.HasIndex("PlantesSauvagesId")
                        .IsUnique()
                        .HasFilter("[PlantesSauvagesId] IS NOT NULL");

                    b.ToTable("HuilesEssentiel");
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Models.Pays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ArbresId")
                        .HasColumnType("int");

                    b.Property<int?>("HuilesEssentielId")
                        .HasColumnType("int");

                    b.Property<string>("NomPays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlantesAromatiquesId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantesSauvagesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pays");
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Models.PlantesAromatiques", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Arosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BienFait")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategorieId")
                        .HasColumnType("int");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entretiens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Habitat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Maladies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodeDeFleuraison")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefenrenceTerrain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecetteSimple")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rusticite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taille")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voisinage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.ToTable("PlantesAromatiques");
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Models.PlantesSauvages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Arosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BienFait")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategorieId")
                        .HasColumnType("int");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Danger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entretiens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Habitat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Maladies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodeDeFleuraison")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefenrenceTerrain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecetteSimple")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rusticite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taille")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voisinage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.ToTable("PlantesSauvages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PaysPlantesAromatiques", b =>
                {
                    b.Property<int>("PaysId")
                        .HasColumnType("int");

                    b.Property<int>("PlantesAromatiquesId")
                        .HasColumnType("int");

                    b.HasKey("PaysId", "PlantesAromatiquesId");

                    b.HasIndex("PlantesAromatiquesId");

                    b.ToTable("PaysPlantesAromatiques");
                });

            modelBuilder.Entity("PaysPlantesSauvages", b =>
                {
                    b.Property<int>("PaysId")
                        .HasColumnType("int");

                    b.Property<int>("PlantesSauvagesId")
                        .HasColumnType("int");

                    b.HasKey("PaysId", "PlantesSauvagesId");

                    b.HasIndex("PlantesSauvagesId");

                    b.ToTable("PaysPlantesSauvages");
                });

            modelBuilder.Entity("ApplicationRoleApplicationUser", b =>
                {
                    b.HasOne("LeGuideDesPlantesApp.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeGuideDesPlantesApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArbresPays", b =>
                {
                    b.HasOne("LeGuideDesPlantesApp.Models.Arbres", null)
                        .WithMany()
                        .HasForeignKey("ArbresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeGuideDesPlantesApp.Models.Pays", null)
                        .WithMany()
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HuilesEssentielPays", b =>
                {
                    b.HasOne("LeGuideDesPlantesApp.Models.HuilesEssentiel", null)
                        .WithMany()
                        .HasForeignKey("HuilesEssentielsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeGuideDesPlantesApp.Models.Pays", null)
                        .WithMany()
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Models.Arbres", b =>
                {
                    b.HasOne("LeGuideDesPlantesApp.Models.Categorie", null)
                        .WithMany("Arbres")
                        .HasForeignKey("CategorieId");

                    b.HasOne("LeGuideDesPlantesApp.Models.HuilesEssentiel", "HuilesEssentiel")
                        .WithMany()
                        .HasForeignKey("HuilesEssentielId");

                    b.Navigation("HuilesEssentiel");
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Models.HuilesEssentiel", b =>
                {
                    b.HasOne("LeGuideDesPlantesApp.Models.Categorie", null)
                        .WithMany("HuilesEssentiel")
                        .HasForeignKey("CategorieId");

                    b.HasOne("LeGuideDesPlantesApp.Models.PlantesAromatiques", "PlantesAromatiques")
                        .WithOne("HuilesEssentiel")
                        .HasForeignKey("LeGuideDesPlantesApp.Models.HuilesEssentiel", "PlantesAromatiquesId");

                    b.HasOne("LeGuideDesPlantesApp.Models.PlantesSauvages", "PlantesSauvages")
                        .WithOne("HuilesEssentiel")
                        .HasForeignKey("LeGuideDesPlantesApp.Models.HuilesEssentiel", "PlantesSauvagesId");

                    b.Navigation("PlantesAromatiques");

                    b.Navigation("PlantesSauvages");
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Models.PlantesAromatiques", b =>
                {
                    b.HasOne("LeGuideDesPlantesApp.Models.Categorie", null)
                        .WithMany("PlantesAromatiques")
                        .HasForeignKey("CategorieId");
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Models.PlantesSauvages", b =>
                {
                    b.HasOne("LeGuideDesPlantesApp.Models.Categorie", null)
                        .WithMany("PlantesSauvages")
                        .HasForeignKey("CategorieId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("LeGuideDesPlantesApp.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LeGuideDesPlantesApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LeGuideDesPlantesApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("LeGuideDesPlantesApp.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeGuideDesPlantesApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LeGuideDesPlantesApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaysPlantesAromatiques", b =>
                {
                    b.HasOne("LeGuideDesPlantesApp.Models.Pays", null)
                        .WithMany()
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeGuideDesPlantesApp.Models.PlantesAromatiques", null)
                        .WithMany()
                        .HasForeignKey("PlantesAromatiquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaysPlantesSauvages", b =>
                {
                    b.HasOne("LeGuideDesPlantesApp.Models.Pays", null)
                        .WithMany()
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeGuideDesPlantesApp.Models.PlantesSauvages", null)
                        .WithMany()
                        .HasForeignKey("PlantesSauvagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Models.Categorie", b =>
                {
                    b.Navigation("Arbres");

                    b.Navigation("HuilesEssentiel");

                    b.Navigation("PlantesAromatiques");

                    b.Navigation("PlantesSauvages");
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Models.PlantesAromatiques", b =>
                {
                    b.Navigation("HuilesEssentiel");
                });

            modelBuilder.Entity("LeGuideDesPlantesApp.Models.PlantesSauvages", b =>
                {
                    b.Navigation("HuilesEssentiel");
                });
#pragma warning restore 612, 618
        }
    }
}
